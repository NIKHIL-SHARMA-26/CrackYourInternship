https://leetcode.com/problems/knight-dialer/description/
class Solution {
public:
  long long mod = 1e9+7;
//   int dir[8][2] = {{1,2},{1,-2},{2,1},{2,-1},{-1,2},{-1,-2},{-2,1},{-2,-1}};
//   vector<vector<vector<int>>>dp;
//    long long getWays( int r ,int c, int n){
//        if(r<0 || c<0 || r>=4 || c>=3 || (r==3 && c!=1))return 0;
//        if(n==1)return 1;
//         if(dp[r][c][n]!=-1)return dp[r][c][n];
        
//         long long ans=0;
//         for(int i=0;i<8;i++){
//             ans  = (ans + getWays(dir[i][0]+r,dir[i][1]+c,n-1))%mod;
//         }
//        return dp[r][c][n] = ans;
//   }
    int knightDialer(int n) {
        long long ans=0;
        // dp = vector<vector<vector<int>>>(4,vector<vector<int>>(3,vector<int>(n+1,-1)));
        // for(int r=0;r<4;r++){
        //     for(int c=0;c<3;c++){
        //    ans = (ans + getWays(r,c,n))%mod;
        //     }
        // }
        vector<vector<int>>path = {{4,6},{6,8},{7,9},{4,8},{0,3,9},{},{0,1,7},{2,6},{1,3},{2,4}};
        vector<vector<int>>dp(n+1,vector<int>(10));
        for(int i=0;i<10;i++)dp[1][i]=1;
         for(int step = 2;step<=n;step++){
            for(int j=0;j<10;j++){
               for(auto k:path[j]){
                   dp[step][j] += dp[step-1][k];
                   dp[step][j] %= mod;
               }
            }
         }
         for(int i=0;i<10;i++){
             ans += dp[n][i];
             ans %= mod;
         }
        return ans;
    }
};